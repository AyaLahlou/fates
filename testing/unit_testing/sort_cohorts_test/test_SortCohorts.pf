module test_SortCohorts
  !
  ! DESCRIPTION:
  !		Tests the patche's SortCohorts method
  !
  use FatesConstantsMod, only : r8 => fates_r8
  use FatesCohortMod,    only : fates_cohort_type
  use FatesPatchMod,     only : fates_patch_type
  use FatesFactoryMod,   only : CreateTestPatchList
  use funit

  implicit none
  
  @TestCase
  type, extends(TestCase) :: TestSortCohorts
  end type TestSortCohorts

  contains 
  
    @Test 
    subroutine TwoCohorts_AscendingOrder_Unchanged(this)
      ! test that for a hard-coded list in ascending order is sorted, the order remains unchanged
      class(TestSortCohorts),  intent(inout) :: this                            ! test object
      type(fates_patch_type)                 :: patch                           ! patch objects
      type(fates_cohort_type), pointer       :: head, cohort                    ! cohort objects
      real(r8)                               :: heights(2) = (/2.0_r8, 5.0_r8/) ! hard-coded cohort heights
      integer                                :: i                               ! looping index
      
      ! create a hardcoded doubly linked list
      call CreateTestPatchList(patch, heights)
      
      ! sort cohorts
      call patch%SortCohorts()
      
      ! test that the order is correct
      i = 1
      cohort => patch%shortest
      do while (associated(cohort))
        @assertEqual(heights(i), cohort%height)
        cohort => cohort%taller
        i = i + 1
      end do
           
    end subroutine TwoCohorts_AscendingOrder_Unchanged
    
    @Test 
    subroutine TwoCohorts_DescendingOrder_Reversed(this)
      ! test that for a hard-coded list in descending order is sorted, the order is reversed
      class(TestSortCohorts),  intent(inout) :: this                            ! patch test object
      type(fates_patch_type)                 :: patch                           ! patch object
      type(fates_cohort_type), pointer       :: head, cohort                    ! cohort objects
      real(r8)                               :: heights(2) = (/5.0_r8, 2.0_r8/) ! hard-coded cohort heights
      integer                                :: i                               ! looping index
      
      ! create a hardcoded doubly linked list
      call CreateTestPatchList(patch, heights)
      
      ! sort cohorts
      call patch%SortCohorts()
      
      ! test that the order is correct
      i = size(heights)
      cohort => patch%shortest
      do while (associated(cohort))
        @assertEqual(cohort%height, heights(i))
        cohort => cohort%taller
        i = i - 1
      end do
           
    end subroutine TwoCohorts_DescendingOrder_Reversed
    
    @Test 
    subroutine SmallList_AscendingOrder_Unchanged(this)
      ! test that for a hard-coded list in ascending order is sorted, the order remains unchanged
      class(TestSortCohorts),  intent(inout) :: this ! patch test object
      type(fates_patch_type)                 :: patch
      type(fates_cohort_type), pointer       :: head, new_node
      integer                                :: i
      ! hard-coded heights
      real(r8)                               :: heights(8) = (/2.0_r8, 5.0_r8, 10.0_r8,  &
        12.0_r8, 12.5_r8, 12.5001_r8, 20.0_r8, 25.0_r8/)
      
      ! create a hardcoded doubly linked list
      call CreateTestPatchList(patch, heights)
        
      ! sort cohorts
      call patch%SortCohorts()
      
      ! test that the order is correct
      i = 1
      new_node => patch%shortest
      do while (associated(new_node))
        @assertEqual(new_node%height, heights(i))
        new_node => new_node%taller
        i = i + 1
      end do
           
    end subroutine SmallList_AscendingOrder_Unchanged
    
    @Test 
    subroutine SmallList_DescendingOrder_Reversed(this)
      ! test that for a hard-coded list in descending order is sorted, the order remains unchanged
      class(TestSortCohorts),  intent(inout) :: this ! patch test object
      type(fates_patch_type)                 :: patch
      type(fates_cohort_type), pointer       :: head, new_node
      integer                                :: i
      real(r8)                               :: heights(8) = (/25.0_r8, 20.0_r8, 12.5001_r8,   &
        12.5_r8, 12.0_r8, 10.0_r8, 5.0_r8, 2.0_r8/)

      ! create a hardcoded doubly linked list
      call CreateTestPatchList(patch, heights)
      
      ! sort cohorts
      call patch%SortCohorts()
      
      ! test that the order is correct
      i = size(heights)
      new_node => patch%shortest
      do while (associated(new_node))
        @assertEqual(new_node%height, heights(i))
        new_node => new_node%taller
        i = i - 1
      end do
           
    end subroutine SmallList_DescendingOrder_Reversed
    
    @Test 
    subroutine SmallList_UnsortedOrder_SortedCorrectly(this)
      ! test that a small list in unsorted order is sorted correctly
      class(TestSortCohorts),  intent(inout) :: this ! patch test object
      type(fates_patch_type)                 :: patch
      type(fates_cohort_type), pointer       :: head, new_node
      integer                                :: i
      real(r8)                               :: heights(8) = (/10.0_r8, 100.0_r8, 15.0_r8,   &
        2.0_r8, 1.0_r8, 12.5001_r8, 20.0_r8, 0.5_r8/)
      
      ! create a hardcoded doubly linked list
      call CreateTestPatchList(patch, heights)
      
      ! sort cohorts
      call patch%SortCohorts()
      
      ! check backwards and forwards
      new_node => patch%shortest
      do while (associated(new_node))
        if (associated(new_node%taller)) then
          @assertGreaterThanOrEqual(new_node%taller%height, new_node%height)
        end if
        new_node => new_node%taller
      end do
      
      new_node => patch%tallest
      do while (associated(new_node))
        if (associated(new_node%shorter)) then 
         @assertGreaterThanOrEqual(new_node%height, new_node%shorter%height)
        end if
        new_node => new_node%shorter
      end do
            
    end subroutine SmallList_UnsortedOrder_SortedCorrectly
    
    @Test 
    subroutine TwoCohorts_IdenticalHeights_CorrectOrder(this)
      ! test that when a list of two cohorts of identical heights is sorted the order remains unchanged
      class(TestSortCohorts),  intent(inout) :: this ! patch test object
      type(fates_patch_type)                 :: patch
      type(fates_cohort_type), pointer       :: head, cohort
      real(r8), parameter                    :: dbhs(2) = (/1.0_r8, 2.0_r8/)
      real(r8), parameter                    :: heights(2) = (/5.0_r8, 5.0_r8/)
      integer                                :: i
      
      ! create a hardcoded doubly linked list
      call CreateTestPatchList(patch, heights, dbhs=dbhs)
      
      ! sort cohorts
      call patch%SortCohorts()
      
      ! test that the order is correct
      i = 1
      cohort => patch%shortest
      do while (associated(cohort))
        @assertEqual(cohort%dbh, dbhs(i))
        cohort => cohort%taller
        i = i + 1
      end do
           
    end subroutine TwoCohorts_IdenticalHeights_CorrectOrder
    
    @Test 
    subroutine SmallList_IdenticalHeights_CorrectOrder(this)
      ! test that when a small list of cohorts of identical heights is sorted the order remains unchanged
      class(TestSortCohorts),  intent(inout) :: this ! patch test object
      type(fates_patch_type)                 :: patch
      type(fates_cohort_type), pointer       :: head, cohort
      real(r8),                allocatable   :: heights(:), dbhs(:)
      real(r8)                               :: dbh
      integer                                :: i
      real(r8),                parameter     :: height = 10.0_r8 
      integer,                 parameter     :: num_cohorts = 8     
      
      ! create dbh and height arrays
      allocate(dbhs(num_cohorts))
      allocate(heights(num_cohorts))
      do i = 1, num_cohorts 
        dbhs(i) = i
        heights(i) = height
      end do 
      
      ! create a hardcoded doubly linked list     
      call CreateTestPatchList(patch, heights, dbhs=dbhs)
    
      ! sort cohorts
      call patch%SortCohorts()
      
      ! test that the order is correct
      i = 1
      cohort => patch%shortest
      do while (associated(cohort))
        dbh = float(i)
        @assertEqual(cohort%dbh, dbh)
        cohort => cohort%taller
        i = i + 1
      end do
           
    end subroutine SmallList_IdenticalHeights_CorrectOrder

end module test_SortCohorts
