module test_InsertCohortNew
  !
  ! DESCRIPTION:
  !		Tests the patch's InsertCohort method
  !
  use FatesConstantsMod,    only : r8 => fates_r8
  use EDParamsMod,          only : nclmax
  use FatesRadiationMemMod, only : num_swb
  use FatesCohortMod,       only : fates_cohort_type
  use FatesPatchMod,        only : fates_patch_type
  use funit

  implicit none
  
  @TestCase
  type, extends(TestCase) :: TestInsertCohort
    type(fates_patch_type), pointer :: patch
    contains
      procedure :: setUp
  end type TestInsertCohort

  real(r8), parameter :: tol = 1.e-13_r8

  contains 
  
    subroutine setUp(this)
      class(TestInsertCohort), intent(inout) :: this           ! test object
      type(fates_cohort_type), pointer       :: new_node, head ! cohort objects
      real(r8), parameter :: heights(8) = (/2.0_r8, 5.0_r8, 10.0_r8, 12.0_r8, 12.5_r8,   &
         15.0_r8, 20.0_r8, 25.0_r8/)

      ! hard-code a linked list
      allocate(this%patch)
      
      allocate(head)
      this%patch%shortest => head
      head%height = heights(1)
      
      allocate(new_node)
      new_node%height = heights(2)
      head%taller => new_node
      new_node%shorter => head
      
      allocate(new_node)
      new_node%height = heights(3)
      head%taller%taller => new_node
      new_node%shorter => head%taller
      
      allocate(new_node)
      new_node%height = heights(4)
      head%taller%taller%taller => new_node
      new_node%shorter => head%taller%taller
      
      allocate(new_node)
      new_node%height = heights(5)
      head%taller%taller%taller%taller => new_node
      new_node%shorter => head%taller%taller%taller
      
      allocate(new_node)
      new_node%height = heights(6)
      head%taller%taller%taller%taller%taller => new_node
      new_node%shorter => head%taller%taller%taller%taller
      
      allocate(new_node)
      new_node%height = heights(7)
      head%taller%taller%taller%taller%taller%taller => new_node
      new_node%shorter => head%taller%taller%taller%taller%taller
      
      allocate(new_node)
      new_node%height = heights(8)
      head%taller%taller%taller%taller%taller%taller%taller => new_node
      new_node%shorter => head%taller%taller%taller%taller%taller%taller
      this%patch%tallest => new_node
      
    end subroutine setUp

    @Test 
    subroutine InsertCohort_EmptyList(this)
      ! test that when inserting into an empty list, the new cohort becomes the shortest and tallest
      ! and the taller and shorter pointers are null()
      class(TestInsertCohort), intent(inout) :: this ! test object
      type(fates_patch_type),  pointer       :: patch
      type(fates_cohort_type), pointer       :: cohort
      
      ! empty patch
      allocate(patch)
      
      ! insert a new cohort
      allocate(cohort)
      call patch%InsertCohort(cohort)
      
      ! verify cohort is shortest and tallest in list
      @assertTrue(associated(cohort, patch%tallest))
      @assertTrue(associated(cohort, patch%shortest))
      
      ! verify taller and shorter pointers of inserted cohort are null
      @assertFalse(associated(cohort%taller))
      @assertFalse(associated(cohort%shorter))
                                
    end subroutine InsertCohort_EmptyList
    
    @Test
    subroutine InsertCohort_ShortestCohort(this)
      ! test that when inserted as the shortest cohort, it is inserted correctly
      class(TestInsertCohort), intent(inout) :: this              ! test object
      type(fates_cohort_type), pointer       :: cohort            ! cohort object
      type(fates_cohort_type), pointer       :: previous_shortest ! previous tallest cohort
      real(r8), parameter :: height = 1.0_r8
      
      ! save previous shorter
      previous_shortest => this%patch%shortest
      
      ! insert cohort
      allocate(cohort)
      cohort%height = height
      call this%patch%InsertCohort(cohort)
    
      ! verify that new cohort is now the shortest
      @assertTrue(associated(cohort, this%patch%shortest))
      
      ! verify that new new shortest cohort's taller pointer is the previous shortest
      @assertTrue(associated(cohort%taller, previous_shortest))
      
    end subroutine InsertCohort_ShortestCohort
    
    @Test
    subroutine InsertCohort_TallestCohort(this)
      ! test that when inserted as the tallest cohort, it is inserted correctly
      class(TestInsertCohort), intent(inout) :: this              ! test object
      type(fates_cohort_type), pointer       :: cohort            ! cohort object
      type(fates_cohort_type), pointer       :: previous_tallest  ! previous tallest cohort
      real(r8), parameter :: height = 100.0_r8
      
      ! save previous shorter
      previous_tallest => this%patch%tallest
      
      ! insert cohort
      allocate(cohort)
      cohort%height = height
      call this%patch%InsertCohort(cohort)
    
      ! verify that new cohort is now the tallest
      @assertTrue(associated(cohort, this%patch%tallest))
      
      ! verify that new new tallest cohort's shorter pointer is the previous tallest
      @assertTrue(associated(cohort%shorter, previous_tallest))
      
    end subroutine InsertCohort_TallestCohort
    
    @Test
    subroutine InsertCohort_CorrectOrder(this)
      ! test that a cohort is inserted correctly
      class(TestInsertCohort), intent(inout) :: this   ! test object
      type(fates_cohort_type), pointer       :: cohort ! cohort object
      real(r8), parameter :: height = 16.0_r8
      
      ! insert cohort
      allocate(cohort)
      cohort%height = height
      call this%patch%InsertCohort(cohort)
      
      ! traverse the list to ensure correct order
      cohort => this%patch%shortest 
      do while (associated(cohort%taller))
        @assertLessThanOrEqual(cohort%height, cohort%taller%height, tolerance=tol)
        cohort => cohort%taller
      end do
      
      ! traverse backwards
      cohort => this%patch%tallest 
      do while (associated(cohort%shorter))
        @assertGreaterThanOrEqual(cohort%height, cohort%shorter%height, tolerance=tol)
        cohort => cohort%shorter
      end do
      
    end subroutine InsertCohort_CorrectOrder
    
    @Test
    subroutine InsertCohort_SameHeight(this)
      ! test that inserting a cohort with the same height as an existing cohort maintains insertion order
      class(TestInsertCohort), intent(inout) :: this    ! test object
      type(fates_patch_type),  pointer       :: patch   ! patch object
      type(fates_cohort_type), pointer       :: cohort1 ! first cohort object
      type(fates_cohort_type), pointer       :: cohort2 ! second cohort object
      type(fates_cohort_type), pointer       :: cohort3 ! third cohort object
      
      ! initialize patch and cohorts
      allocate(patch)
      
      allocate(cohort1)
      cohort1%height = 10.0_r8
      
      allocate(cohort2)
      cohort2%height = 15.0_r8
      
      allocate(cohort3)
      cohort3%height = 10.0_r8
      
      ! insert cohorts
      call patch%InsertCohort(cohort1)
      call patch%InsertCohort(cohort2)
      call patch%InsertCohort(cohort3)
      
      ! validate state of linked list - cohort3 should be after cohort1
      ! cohort1 is still shortest
      @assertTrue(associated(patch%shortest, cohort1))
      
      ! verify order of cohorts with height 10.0
      @assertTrue(associated(cohort1%taller, cohort3))
      @assertTrue(associated(cohort3%shorter, cohort1))
      
      ! verify cohort3 points to cohort2 as taller
      @assertTrue(associated(cohort3%taller, cohort2))
      @assertTrue(associated(cohort2%shorter, cohort3))
      
      ! tallest cohort is still cohort2
      @assertTrue(associated(patch%tallest, cohort2))
      
    end subroutine InsertCohort_SameHeight
    
end module test_InsertCohortNew


